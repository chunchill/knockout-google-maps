// knockout-google-maps - v0.0.1 
// (c) Nick Fisher - https://github.com/nrf110/knockout-google-maps
// License: MIT (http://www.opensource.org/licenses/mit-license.php)
!function(factory){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?factory(require("knockout")):"function"==typeof define&&define.amd?define(["knockout"],factory):factory(ko)}(function(ko){var floatEqual=function(f1,f2){return Math.abs(f1-f2)<1e-6},unwrap=ko.utils.unwrapObservable,forEach=ko.utils.arrayForEach,filter=(ko.utils.arrayMap,ko.utils.arrayFirst,ko.utils.arrayFilter),extend=function(target){for(var idx=1;idx<arguments.length;idx++){var source=arguments[idx];for(prop in source)target[prop]=unwrap(source[prop])}return target},mapFilter=function(array,predicate,transform){for(var results=[],idx=0;idx<array.length;idx++){var item=array[idx];predicate(item)&&results.push(transform(item))}return results},queueTask=function(callback){window.setTimeout(callback,0)},MapModel=function(bindings,element){var _mapInstance=null,_markers=[],_handlers=[],_defaults={zoom:8,draggable:!1,mapTypeId:google.maps.MapTypeId.ROADMAP},o=extend({},_defaults,unwrap(bindings.options)),self=this,currentInfoWindow=null;self.center=unwrap(bindings.center),self.zoom=unwrap(bindings.zoom),self.draggable=unwrap(bindings.draggable),self.dragging=!1,self.markers=[],_mapInstance=new google.maps.Map(element,extend(o,{center:bindings.center,zoom:bindings.zoom,draggable:bindings.draggable,mapTypeId:bindings.mapTypeId})),google.maps.event.addListener(_mapInstance,"dragstart",function(){self.dragging=!0}),google.maps.event.addListener(_mapInstance,"idle",function(){self.dragging=!1}),google.maps.event.addListener(_mapInstance,"drag",function(){self.dragging=!0}),google.maps.event.addListener(_mapInstance,"zoom_changed",function(){self.zoom=_mapInstance.getZoom(),self.center=_mapInstance.getCenter()}),google.maps.event.addListener(_mapInstance,"center_changed",function(){self.center=_mapInstance.getCenter()}),_handlers.length>0&&forEach(_handlers,function(handler){google.maps.event.addListener(_mapInstance,handler.on,handler.handler)}),self.draw=function(){google.maps.event.trigger(_mapInstance,"resize");var instanceCenter=_mapInstance.getCenter();floatEqual(instanceCenter.lat(),self.center.lat())&&floatEqual(instanceCenter.lng(),self.center.lng())||_mapInstance.setCenter(self.center),_mapInstance.getZoom()!=self.zoom&&_mapInstance.setZoom(self.zoom)},self.on=function(evt,handler){self._handlers.push({on:evt,handler:handler})},self.fit=function(){if(_mapInstance&&_markers.length>0){var bounds=new google.maps.LatLngBounds;forEach(_markers,function(marker){bounds.extend(marker.getPosition())}),_mapInstance.fitBounds(bounds)}},self.addMarker=function(idx,lat,lng,icon,infoWindowContent){var marker=new google.maps.Marker({position:new google.maps.LatLng(lat,lng),map:_mapInstance,icon:icon});if(null!=infoWindowContent){var infoWindow=new google.maps.InfoWindow({content:infoWindowContent});google.maps.event.addListener(marker,"click",function(){null!=currentInfoWindow&&currentInfoWindow.close(),infoWindow.open(_mapInstance,marker),currentInfoWindow=infoWindow})}return _markers[idx]=marker,self.markers[idx]={lat:lat,lng:lng,draggable:!1,icon:icon,infoWindowContent:infoWindowContent},marker},self.removeMarker=function(idx){var marker=_markers[idx];_markers.splice(idx,1),self.markers.splice(idx,1),marker.setMap(null)}};ko.bindingHandlers.gmaps=function(){var parseBindings=function(valueAccessor,allBindings){var options=valueAccessor()||{},bindings={options:options};return forEach(["handlers","draggable","zoom","center","markers","mapTypeId","fit"],function(binding){allBindings[binding]&&(bindings[binding]=allBindings[binding])}),bindings};return{init:function(element,valueAccessor,allBindingsAccessor,viewModel){var allBindings=allBindingsAccessor(),bindings=parseBindings(valueAccessor,allBindings),_map=new MapModel(bindings,element),updateBinding=function(binding,value){ko.utils.isWriteableObservable(bindings[binding])?bindings[binding](value):allBindings._ko_property_writers&&allBindings._ko_property_writers[binding]&&allBindings._ko_property_writers[binding](value)};_map.on("drag",function(){var center=_map.center;queueTask(function(){updateBinding("center",{latitude:center.lat(),longitude:center.lng()})})}),_map.on("zoom_changed",function(){var oldZoom=unwrap(bindings.zoom);oldZoom!=_map.zoom&&queueTask(function(){updateBinding("zoom",_map.zoom)})}),_map.on("center_changed",function(){var center=_map.center;queueTask(function(){_map.dragging||updateBinding("center",{latitude:center.lat(),longitude:center.lng()})})}),viewModel._map=_map,_map.draw(),bindings.markers.subscribe(function(changes){queueTask(function(){var removedIndexes=mapFilter(changes,function(item){return"deleted"===item.status},function(item){return item.index}),added=filter(changes,function(item){return"added"===item.status});forEach(removedIndexes,_map.removeMarker),forEach(added,function(item){_map.addMarker(item.latitude,item.longitude,item.icon,item.infoWindow)}),bindings.fit&&unwrap(bindings.fit)&&_map.markers.length>1&&_map.fit()})},null,"arrayChange"),bindings.center.subscribe(function(newValue){var center=_map.center,lat=center.lat(),lng=center.lng();floatEqual(lat,newValue.latitude)&&floatEqual(lng,newValue.longitude)||_map.dragging||(_map.center=new google.maps.LatLng(newValue.latitude,newValue.longitude),_map.draw())}),bindings.zoom.subscribe(function(newValue){newValue!==_map.zoom&&(_map.zoom=newValue,_map.draw())})}}}()});